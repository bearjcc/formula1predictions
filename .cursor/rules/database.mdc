# Database Design & Migration Standards

## Schema Design
- Use proper foreign key relationships
- Implement soft deletes where appropriate
- Use JSON columns for flexible prediction data
- Add indexes for frequently queried columns
- Use appropriate data types and constraints

## Migration Best Practices
- Always include rollback methods
- Use descriptive migration names
- Test migrations on production-like data
- Version control all schema changes
- Use proper migration ordering

## Data Integrity
- Use database constraints for data validation
- Implement proper cascading rules
- Handle historical data preservation
- Maintain referential integrity
- Use transactions for complex operations

## Performance Optimization
- Add indexes on frequently queried columns
- Use composite indexes for complex queries
- Implement proper query optimization
- Monitor slow query performance
- Use database views for complex aggregations

## Model Relationships
- Define proper Eloquent relationships
- Use eager loading to prevent N+1 queries
- Implement proper relationship constraints
- Use pivot tables for many-to-many relationships
- Define relationship methods with return types

## Data Seeding
- Create comprehensive seeders for development
- Use factories for test data generation
- Implement proper data relationships in seeders
- Use realistic data for testing
- Maintain data consistency across environments

## Backup & Recovery
- Implement regular database backups
- Test backup restoration procedures
- Use proper backup storage strategies
- Implement point-in-time recovery
- Document recovery procedures

## Monitoring & Maintenance
- Monitor database performance metrics
- Implement proper logging for database operations
- Use database health checks
- Plan for database scaling
- Regular maintenance and optimization
description:
globs:
alwaysApply: true
---
