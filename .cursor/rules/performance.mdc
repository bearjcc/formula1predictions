# Performance Optimization Standards

## Database Optimization
- Use eager loading to prevent N+1 queries
- Implement proper database indexing
- Use query optimization techniques
- Cache frequently accessed data
- Monitor slow query performance

## Frontend Performance
- Optimize asset bundling with Vite
- Implement lazy loading for components
- Use CDN for static assets
- Minimize JavaScript bundle size
- Optimize images and media files

## Caching Strategy
- Cache API responses appropriately
- Use Redis for session storage
- Implement page caching where suitable
- Cache expensive calculations (scoring)
- Use browser caching for static assets

## Query Optimization
- Use database indexes effectively
- Implement query result caching
- Use pagination for large datasets
- Optimize complex joins and aggregations
- Monitor query execution plans

## Asset Optimization
- Minify CSS and JavaScript
- Compress images and media
- Use modern image formats (WebP, AVIF)
- Implement proper asset versioning
- Use CDN for global asset delivery

## Memory Management
- Monitor memory usage patterns
- Implement proper garbage collection
- Use efficient data structures
- Avoid memory leaks in long-running processes
- Optimize database connection pooling

## Load Testing
- Test application under load
- Identify performance bottlenecks
- Monitor response times
- Test concurrent user scenarios
- Plan for scalability

## Monitoring & Profiling
- Use Laravel Debugbar in development
- Implement application performance monitoring
- Monitor server resource usage
- Profile critical user workflows
- Set up performance alerts
description:
globs:
alwaysApply: true
---
