# Comprehensive Testing Strategy

## Test Categories
- **Unit Tests**: Individual methods and classes
- **Feature Tests**: Complete user workflows
- **Browser Tests**: User interface interactions
- **Integration Tests**: API and external service integration
- **Performance Tests**: Load and stress testing

## Test Data Management
- Use factories for consistent test data
- Implement database seeding strategies
- Mock external dependencies
- Use test databases for isolation
- Maintain test data consistency

## Continuous Testing
- Run tests on every commit
- Implement automated testing pipeline
- Monitor test coverage metrics
- Maintain test suite performance
- Use parallel test execution

## Test Environment
- Use SQLite for fast test execution
- Implement proper test isolation
- Use in-memory databases
- Mock external services
- Maintain consistent test environments

## Coverage Strategy
- Aim for 80%+ code coverage
- 100% coverage for critical business logic
- Test all user roles and permissions
- Cover edge cases and error scenarios
- Test all prediction types

## Performance Testing
- Test database query performance
- Monitor N+1 query issues
- Test with realistic data volumes
- Profile critical user workflows
- Load test prediction submissions

## Browser Testing
- Test on multiple browsers
- Test responsive design
- Test accessibility features
- Test user interactions
- Test error handling

## Integration Testing
- Test F1 API integration
- Test external service interactions
- Test database operations
- Test file uploads and processing
- Test email and notification systems

## Test Maintenance
- Keep tests up to date
- Refactor tests regularly
- Remove obsolete tests
- Maintain test documentation
- Review test effectiveness
description:
globs:
alwaysApply: true
---
